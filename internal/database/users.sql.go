// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps (id, created_at, updated_at, body, user_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, body, user_id
`

type CreateChirpParams struct {
	Body   string
	UserID uuid.UUID
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    NOW() + INTERVAL '60 days' 
)
`

type CreateRefreshTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.Token, arg.UserID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteSingleChirpForChirpID = `-- name: DeleteSingleChirpForChirpID :exec
DELETE FROM chirps
WHERE id = $1
`

func (q *Queries) DeleteSingleChirpForChirpID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSingleChirpForChirpID, id)
	return err
}

const getChirps = `-- name: GetChirps :many
SELECT id, created_at, updated_at, body, user_id FROM chirps
ORDER BY created_at
`

func (q *Queries) GetChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirpsForAuthor = `-- name: GetChirpsForAuthor :many
SELECT id, created_at, updated_at, body, user_id FROM chirps
WHERE user_id = $1
ORDER BY created_at
`

func (q *Queries) GetChirpsForAuthor(ctx context.Context, userID uuid.UUID) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirpsForAuthor, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRTokenForUser = `-- name: GetRTokenForUser :one
SELECT token FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) GetRTokenForUser(ctx context.Context, userID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getRTokenForUser, userID)
	var token string
	err := row.Scan(&token)
	return token, err
}

const getSingleChirp = `-- name: GetSingleChirp :one
SELECT id, created_at, updated_at, body, user_id FROM chirps
WHERE id = $1
`

func (q *Queries) GetSingleChirp(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getSingleChirp, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const getTokenExistenceAndValidity = `-- name: GetTokenExistenceAndValidity :one
SELECT expires_at, revoked_at FROM refresh_tokens
WHERE token = $1
`

type GetTokenExistenceAndValidityRow struct {
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) GetTokenExistenceAndValidity(ctx context.Context, token string) (GetTokenExistenceAndValidityRow, error) {
	row := q.db.QueryRowContext(ctx, getTokenExistenceAndValidity, token)
	var i GetTokenExistenceAndValidityRow
	err := row.Scan(&i.ExpiresAt, &i.RevokedAt)
	return i, err
}

const getUserForRefreshToken = `-- name: GetUserForRefreshToken :one
SELECT user_id FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) GetUserForRefreshToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserForRefreshToken, token)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserPasswordByEmail = `-- name: GetUserPasswordByEmail :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users
WHERE email = $1
`

func (q *Queries) GetUserPasswordByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserPasswordByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const reset = `-- name: Reset :exec
DELETE FROM users
`

func (q *Queries) Reset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, reset)
	return err
}

const setRevocationTimestampForRefreshToken = `-- name: SetRevocationTimestampForRefreshToken :exec
UPDATE refresh_tokens
SET revoked_at = $2
WHERE token = $1
`

type SetRevocationTimestampForRefreshTokenParams struct {
	Token     string
	RevokedAt sql.NullTime
}

func (q *Queries) SetRevocationTimestampForRefreshToken(ctx context.Context, arg SetRevocationTimestampForRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, setRevocationTimestampForRefreshToken, arg.Token, arg.RevokedAt)
	return err
}

const updateEmailAndPasswordForUser = `-- name: UpdateEmailAndPasswordForUser :exec
UPDATE users
SET email = $2, hashed_password = $3
WHERE id = $1
`

type UpdateEmailAndPasswordForUserParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
}

func (q *Queries) UpdateEmailAndPasswordForUser(ctx context.Context, arg UpdateEmailAndPasswordForUserParams) error {
	_, err := q.db.ExecContext(ctx, updateEmailAndPasswordForUser, arg.ID, arg.Email, arg.HashedPassword)
	return err
}

const updateToChirpyRed = `-- name: UpdateToChirpyRed :exec
UPDATE users
SET is_chirpy_red = true
WHERE id = $1
`

func (q *Queries) UpdateToChirpyRed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateToChirpyRed, id)
	return err
}
